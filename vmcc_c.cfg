set _vm_ex 0
alias _vmx_try "set _cc_func $_vm_ex; toggle _cc_func _vmx_err 0 \"$*\" 99 nop; __cc_dofunc"
alias _vmx_catch "set _cc_func $_vm_ex; toggle _cc_func \"$*\" 0 nop"
alias _vmx_err "set _vm_ex 99; echo ^1Execution error."
alias _vmx_init "set _vm_ex 0"

// this needs to be a 2 step process due to the quotes
alias _vmxc "set _cc_new $*; _vmxc2"
alias _vmxc2 "set _cc_obj \"${_cc_obj}; ${_cc_new}\""

// various commands as compilation commands
// compile:
alias cs "alias _cc_do \"cc ${* asis}\""
alias cs "echo ^1cs not working"
alias ccnew "mov _cc_obj \"_vmx_init\""
alias cc "mov eax 0; _cc_assign ${* asis} _ _; _cc_link"
alias ld "set _cc_func \"$1\"; toggle _cc_func _ld \"\" _ld1; __cc_dofunc $1"
alias _ld "echo \"^3Storing to vmx86_code_$1\"; menu_cmd rpn dbclr _cc_obj dbpush /vmx86_code_$1 dbsave"
alias _ld1 "echo ^1Usage: ld <objectname>"
alias cx "set _cc_func \"$1\"; toggle _cc_func _cx \"\" _cx1; __cc_dofunc $1"
alias _cx "echo \"^3Executing vmx86_code_$1\"; menu_cmd rpn dbclr /vmx86_code_$1 dbload /_cc_do dbpop def; _cx2"
alias _cx1 "echo ^1Usage: cx <objectname>"
alias _cx2 "_cc_link; _cc_do"

alias _cc_link "alias _cc_do \"$_cc_obj\""

// compile to vmx:
alias _cc_assign2 "_vmxc \"movd $1 eax\""

alias "_vmx_op+" "add $1 $2"
alias "_vmx_op-" "sub $1 $2"
alias "_vmx_op*" "mul $1 $2"
alias "_vmx_op/" "div $1 $2"

// compile to vmx:
alias _cc_opend "_vmxc \"_vmx_op$1 eax $2\""

// compile:
alias _cc_addop   "_vmxc \"menu_cmd rpn /eax $1 def\"; _cc_addop1 ${2- asis}"

// compile:
alias _cc_addsub1 "_vmxc \"_vmx_op$1 eax $2\"; _cc_addop1 ${3- asis}"
alias _cc_addsubend  "_vmxc \"pushv eax\"; _cc_mulop ${2- asis}; _cc_addsubend1 $1"
alias _cc_addsubend1 "_vmxc \"pop ebx\"; _vmxc \"menu_cmd rpn /eax ebx eax $1 def\""

// compile:
alias _cc_mulop   "_vmxc \"menu_cmd rpn /eax $1 def\"; _cc_mulop1 ${2- asis}"

// compile:
alias _cc_muldiv1 "_vmxc \"_vmx_op$1 eax $2\"; _cc_mulop1 ${3- asis}"
alias _cc_muldivend  "_vmxc \"_vmx_op$1 eax $2\"; _cc_addop1 ${3- asis}" // no opend so execute addop

echo "^2You can switch to interpreter mode using ^3vmcc_int"
