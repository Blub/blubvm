// Basically, lisp is good because you could do:
// ( echo "this is fun" ( get me a return value ) )

exec blubvm/vmx86.cfg

alias "(" "@lisp_expr ${* asis} )"
alias @null@ ""

set lisp_max_lambdas 100

set %lisp_Estack 0
set %lisp_Tstack 0
set %lisp_token ""
set %lisp_retn ""
set %lisp_expr ""
set %lisp_tokenparser "@null@"
// lisp function will be increased, and calculated modulo lisp_max_lambdas
// so, lisp_max_lambdas lambdas in one expression could result in ... unexpected behaviour :P
// set %lisp_function 0
// do not overwrite:
menu_cmd rpn /%lisp_function %lisp_function 0 + def

alias @lisp_bump_function "menu_cmd rpn /%lisp_function %lisp_function 1 + lisp_max_lambdas mod def"

// manage a stack of expressions
alias @lisp_push  "@lisp_push_expr; @lisp_push_token"
alias @lisp_pop   "@lisp_pop_token; @lisp_pop_expr"

alias @lisp_push_expr  "set %lisp_Estack_${%lisp_Estack} \"${%lisp_expr}\"; inc \"%lisp_Estack\"; set \"%lisp_expr\" \"\""
alias @lisp_pop_expr   "dec \"%lisp_Estack\"; @_lisp_pop_expr2"
alias @_lisp_pop_expr2 "\"alias\" @_tmp \"set %lisp_expr \\\"$${%lisp_Estack_${%lisp_Estack}}\\\"\"; @_tmp; unalias \"@_tmp\""

alias @lisp_push_token  "set %lisp_Tstack_${%lisp_Tstack} \"${%lisp_tokenparser}\"; inc \"%lisp_Tstack\"; set \"%lisp_tokenparser\" \"\""
alias @lisp_pop_token   "dec \"%lisp_Tstack\"; @_lisp_pop_token2"
alias @_lisp_pop_token2 "\"alias\" @_tmp \"set %lisp_tokenparser \\\"$${%lisp_Tstack_${%lisp_Tstack}}\\\"\"; @_tmp; unalias \"@_tmp\""

alias @lisp_expr  "@lisp_push_expr; @_lisp_expr1 ${* asis}; @lisp_pop_expr"

alias @_lisp_parse_token "${%lisp_tokenparser asis}"
// alias @_lisp_parse_token2 "set %lisp_token ${%lisp_token}"
alias @_lisp_next      "@_lisp_parse_token; ${%lisp_action} ${* asis}"
alias @_lisp_action    "${%lisp_action} ${* asis}"

alias @_lisp_expr1     "set %lisp_token \"$1\"; set %lisp_action \"$1\"; toggle %lisp_action @_lisp_eat1 \"(\" @_lisp_subexpr1 \")\" @_lisp_end; @_lisp_next ${2- asis}"
alias @_lisp_expr2     "set %lisp_token \"$1\"; set %lisp_action \"$1\"; toggle %lisp_action @_lisp_eat  \"(\" @_lisp_subexpr2 \")\" @_lisp_end; @_lisp_next ${2- asis}"
alias @_lisp_eat       "\"alias\" @_tmp \"set %lisp_expr \\\"${%lisp_expr} $${${%lisp_token}}\\\"\"; @_tmp; unalias @_tmp; @_lisp_expr ${* asis}"
// eat1 should not eat, but instead parse the first function and then go to expr2
// so that a quote becomes an actual quote, it must then parse parentheses correctly
alias @_lisp_eat1      "@_lisp_translate; @_lisp_first ${* asis}"
alias @_lisp_eat       "set %lisp_expr \"${%lisp_expr} ${%lisp_token}\"; @_lisp_expr2 ${* asis}"
alias @_lisp_subexpr1  "@lisp_expr ${* asis}; @_lisp_eat1ret; @_lisp_after_end"
alias @_lisp_subexpr2  "@lisp_expr ${* asis}; @_lisp_eatret;  @_lisp_after_end"
alias @_lisp_eat1ret   "set %lisp_oldtoken \"${%lisp_token}\"; set %lisp_token ${%lisp_retn}; @_lisp_translate; @_lisp_eat1ret2"
alias @_lisp_eat1ret2  "set %lisp_retn \"${%lisp_token}\"; set %lisp_token \"${%lisp_oldtoken}\"; @_lisp_eatret"
alias @_lisp_eatret    "set %lisp_expr \"${%lisp_expr} ${%lisp_retn}\""
alias @_lisp_end       "${%lisp_expr asis}; @_lisp_end2 ${* asis}"
alias @_lisp_end2      "set %lisp_retn \"$eax\"; set %lisp_token \"$*\""
alias @_lisp_after_end "@_lisp_expr2 ${%lisp_token asis}"

alias @_lisp_first     "@_lisp_eat ${* asis}"
alias @_lisp_first     "set %lisp_action \"${%lisp_token}\"; toggle %lisp_action @_lisp_eat @lisp%lambda @_lisp_lbdquote @lisp%quote @_lisp_nrmquote; @_lisp_action ${* asis}"
alias @_lisp_lbdquote  "@lisp%lambda ${* asis}; @_lisp_lbdend"
alias @_lisp_lbdend    "echo \"end tok: ${%lisp_token}\"; echo \"end eax: ${eax}\"; echo \"end ret: ${%lisp_retn}\"; @_lisp_eat ${%lisp_token asis}"
alias @_lisp_lbdend    "set %lisp_retn \"$eax\"; set eax \"${%lisp_token}\"; "
alias @_lisp_lbdend    "set %lisp_token \"@null@\"; @_lisp_eat ${%lisp_token asis}";
alias @_lisp_nrmquote  "@_lisp_eat ${* asis}"

// lisp functions only and stuff
set %lisp_funcs_math   "x-+ @lisp%add x-- @lisp%sub x-* @lisp%mul x-/ @lisp%div"
set %lisp_funcs_common "x-get @lisp%get x-quote @lisp%quote x-lambda @lisp%lambda"
alias @_lisp_translate "set %lisp_tmp \"${%lisp_token}\"; set %lisp_token \"x-${%lisp_token}\"; @_lisp_translat1"
alias @_lisp_translat1 "toggle %lisp_token \"${%lisp_tmp}\" ${%lisp_funcs_math asis} ${%lisp_funcs_common asis}"

// lambda function creation
// to add a parameter, we use:
// set %lisp_tmp ${%lisp_token}; toggle %lisp_token %lisp_tmp PARAMETER 
alias @_lisp_add_param "set %lisp_tokenparser \"${%lisp_tokenparser}; set %lisp_token \\\"x-${%lisp_token}\\\"; toggle %lisp_token %lisp_tmp x-$1 $$$2\""
alias @_lisp_new_param "set %lambda_paramcnt 1; set %lisp_tokenparser \"set %lisp_tmp \\\"$${%lisp_token}\\\"; \""
alias @_lisp_new_param "set %lambda_paramcnt 1; set %lisp_tokenparser \"\""
alias @_lisp_add_param "set %lisp_tokenparser \"${%lisp_tokenparser} \\\\\\\"x-$1\\\\\\\" \\\\\\\"$$$$$2\\\\\\\"\""

// lambda is part of the common lisp, so it is @lisp%lambda
alias @lisp%lambda     "@lisp_bump_function; @_lambda_start; @_lambda_expr ${* asis} ); @_lambda_end"
alias @_lambda_next    "${%lisp_action} ${* asis}"
alias @_lambda_start   "@lisp_push_expr; set %lisp_expr \"(\"; @lisp_push_token; @_lisp_new_param"
alias @_lambda_end     "@_lambda_commit; @lisp_pop_token; @lisp_pop_expr"
alias @_lambda_commit  "mov eax \"@lambda%${%lisp_function}\"; \"alias\" @lambda%${%lisp_function} \"${%lisp_expr}\""
alias @_lambda_expr    "set %lisp_action \"$1\"; toggle %lisp_action @_lambda_error1 \"(\" @_lambda_params; @_lambda_next ${2- asis}"
alias @_lambda_error1  "echo ^3lambda: ^7usage: lambda ^2( [parameterlist] )^7 ( [commands] ); echo before \"$*\""
alias @_lambda_params  "set %lisp_token \"$1\"; set %lisp_action \"$1\"; toggle %lisp_action @_lambda_pushpar \")\" @_lambda_body; @_lambda_next ${2- asis}"
alias @_lambda_pushpar "@_lisp_add_param \"${%lisp_token}\" ${%lambda_paramcnt}; inc %lambda_paramcnt; @_lambda_params ${* asis}"
alias @_lambda_body    "set %lisp_action \"$1\"; toggle %lisp_action @_lambda_error2 \"(\" @_lambda_quote; @_lambda_next ${2- asis}"
alias @_lambda_error2  "echo ^3lambda: ^7usage: lambda ( [parameterlist] ) ^2( [commands] ); echo before \"$*\""
alias @_lambda_quote   "set %lisp_token \"$1\"; set %lisp_action \"$1\"; toggle %lisp_action @_lambda_eat ( @_lambda_subexpr ) @_lambda_endquot; @_lambda_next ${2- asis}"
alias @_lambda_eat     "@_param_translate; @_lambda_eat2 ${* asis}"
alias @_lambda_eat2    "set %lisp_expr \"${%lisp_expr} ${%lisp_token}\"; @_lambda_quote ${* asis}"
alias @_lambda_subexpr "@_param_translate; @_lambda_subexp2 ${* asis}"
alias @_lambda_subexp2 "set %lisp_expr \"${%lisp_expr} ${%lisp_token}\"; @_lambda_quote ${* asis}; @_lambda_subexp3"
alias @_lambda_subexp3 "@_lambda_quote ${%lisp_token asis}"
alias @_lambda_endquot "set %lisp_token \"$*\"; set %lisp_expr \"${%lisp_expr} )\""
alias @_lambda_endquot "set %lisp_expr \"${%lisp_expr} )\"; set %lisp_action \"$1\"; toggle %lisp_action @_lambda_endend ( @_lambda_endbeg; @_lambda_next ${* asis}"
alias @_lambda_endend  "set %lisp_token \"$*\""
alias @_lambda_endbeg  "set %lisp_expr \"${%lisp_expr} (\"; @_lambda_quote ${2- asis}"
alias @_param_translate "set %lisp_tmp \"${%lisp_token}\"; set %lisp_token \"x-${%lisp_token}\"; @_param_translat2"
alias @_param_translat2 "\"alias\" @tmp2 \"toggle %lisp_token \\\"$${%lisp_tmp}\\\" ${%lisp_tokenparser asis}\"; @tmp2"

alias @lambda_clear    "@lambda_clear2; dec %lisp_function; @lambda_clear3"
alias @lambda_clear2   "unalias @lambda%${%lisp_function}"
alias @lambda_clear3   "set %lisp_tmp ${%lisp_function}; toggle %lisp_tmp @lambda_clear 0 @null@; @lambda_clear4"
alias @lambda_clear4   "${%lisp_tmp asis}"

// useful functions
alias get              "\"alias\" @_tmp  \"set eax $${$1}\"; @_tmp; unalias @_tmp"
alias quote            "\"alias\" @_tmpx \"${* asis}\"; @_tmpx; unalias @_tmpx"
// some important functions - or: the lisp library
alias @lisp%get        "\"alias\" @_tmp  \"set eax $${$1}\"; @_tmp; unalias @_tmp"
alias @lisp%quote      "\"alias\" @_tmpx \"${* asis}\"; @_tmpx; unalias @_tmpx"
alias @lisp%add        "menu_cmd rpn /eax $1 $2 + def"
alias @lisp%sub        "menu_cmd rpn /eax $1 $2 - def"
alias @lisp%mul        "menu_cmd rpn /eax $1 $2 * def"
alias @lisp%div        "menu_cmd rpn /eax $1 $2 / def"
