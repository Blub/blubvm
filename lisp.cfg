// Basically, lisp is good because you could do:
// ( echo "this is fun" ( get me a return value ) )

alias "(" "@lisp_expr ${* asis} )"
alias @null@ ""

set %lisp_Estack 0
set %lisp_Tstack 0
set %lisp_token ""
set %lisp_retn ""
set %lisp_expr ""
set %lisp_tokenparser "@null@"
// lisp function will be increased, and calculated modulo 100000
// so, 100000 lambdas in one expression could result in ... unexpected behaviour :P
set %lisp_function 0

// manage a stack of expressions
alias @lisp_push  "@lisp_push_expr; @lisp_push_token"
alias @lisp_pop   "@lisp_pop_token; @lisp_pop_expr"

alias @lisp_push_expr  "set %lisp_Estack_${%lisp_Estack} \"${%lisp_expr}\"; inc \"%lisp_Estack\"; set \"%lisp_expr\" \"\""
alias @lisp_pop_expr   "dec \"%lisp_Estack\"; @_lisp_pop_expr2"
alias @_lisp_pop_expr2 "\"alias\" @_tmp \"set %lisp_expr \\\"$${%lisp_Estack_${%lisp_Estack}}\\\"\"; @_tmp; unalias \"@_tmp\""

alias @lisp_push_token  "set %lisp_Tstack_${%lisp_Tstack} \"${%lisp_tokenparser}\"; inc \"%lisp_Tstack\"; set \"%lisp_tokenparser\" \"\""
alias @lisp_pop_token   "dec \"%lisp_Tstack\"; @_lisp_pop_token2"
alias @_lisp_pop_token2 "\"alias\" @_tmp \"set %lisp_tokenparser \\\"$${%lisp_Tstack_${%lisp_Tstack}}\\\"\"; @_tmp; unalias \"@_tmp\""

alias @lisp_expr  "@lisp_push; @_lisp_expr1 ${* asis}; @lisp_pop"

alias @_lisp_parse_token "${%lisp_tokenparser asis}; @_lisp_parse_token2"
alias @_lisp_parse_token2 "set %lisp_token ${%lisp_token}"
alias @_lisp_next      "@_lisp_parse_token; ${%lisp_action} ${* asis}"

alias @_lisp_expr1     "set %lisp_token \"$1\"; set %lisp_action \"$1\"; toggle %lisp_action @_lisp_eat1 \"(\" @_lisp_subexpr1 \")\" @_lisp_end; @_lisp_next ${2- asis}"
alias @_lisp_expr2     "set %lisp_token \"$1\"; set %lisp_action \"$1\"; toggle %lisp_action @_lisp_eat  \"(\" @_lisp_subexpr2 \")\" @_lisp_end;  @_lisp_next ${2- asis}"
alias @_lisp_eat       "\"alias\" @_tmp \"set %lisp_expr \\\"${%lisp_expr} $${${%lisp_token}}\\\"\"; @_tmp; unalias @_tmp; @_lisp_expr ${* asis}"
// eat1 should not eat, but instead parse the first function and then go to expr2
// so that a quote becomes an actual quote, it must then parse parentheses correctly
alias @_lisp_eat1      "@_lisp_translate; @_lisp_eat ${* asis}"
alias @_lisp_eat       "set %lisp_expr \"${%lisp_expr} ${%lisp_token}\"; @_lisp_expr2 ${* asis}"
alias @_lisp_subexpr1  "@lisp_expr ${* asis}; @_lisp_eat1ret; @_lisp_after_end"
alias @_lisp_subexpr2  "@lisp_expr ${* asis}; @_lisp_eatret;  @_lisp_after_end"
alias @_lisp_eat1ret   "set %lisp_token ${%lisp_retn}; @_lisp_translate; @_lisp_eat1ret2 ${* asis}"
alias @_lisp_eat1ret2  "set %lisp_retn ${%lisp_token}; @_lisp_eatret ${* asis}"
alias @_lisp_eatret    "set %lisp_expr \"${%lisp_expr} ${%lisp_retn}\""
alias @_lisp_end       "echo \"${%lisp_expr}\"; ${%lisp_expr asis}; @_lisp_end2 ${* asis}"
alias @_lisp_end       "${%lisp_expr asis}; @_lisp_end2 ${* asis}"
alias @_lisp_end2      "set %lisp_retn \"$eax\"; set %lisp_token \"$*\""
alias @_lisp_after_end "@_lisp_expr2 ${%lisp_token asis}"

// lisp functions only and stuff
set %lisp_math_funcs "x-+ @lisp%add x-- @lisp%sub x-* @lisp%mul x-/ @lisp%div"
alias @_lisp_translate "set %lisp_tmp \"${%lisp_token}\"; set %lisp_token \"x-${%lisp_token}\"; @_lisp_translat1"
alias @_lisp_translat1 "toggle %lisp_token \"${%lisp_tmp}\" ${%lisp_math_funcs asis}"


// to add a parameter, we use:
// set %lisp_tmp ${%lisp_token}; toggle %lisp_token %lisp_tmp PARAMETER 
alias @_lisp_add_param "set %lisp_tokenparser \"${%lisp_tokenparser}; set %lisp_tmp \\\"${%lisp_token}\\\"; set %lisp_token \\\"x-${%lisp_token}\\\"; toggle %lisp_token %lisp_tmp x-$1 $$$2\""
alias @_lisp_new_param "set %lisp_tokenparser \"@null@\""

// some important functions:
alias get              "\"alias\" @_tmp  \"set eax $${$1}\"; @_tmp; unalias @_tmp"
alias quote            "\"alias\" @_tmpx \"${* asis}\"; @_tmpx; unalias @_tmpx"
alias @lisp%get        "\"alias\" @_tmp  \"set eax $${$1}\"; @_tmp; unalias @_tmp"
alias @lisp%quote      "\"alias\" @_tmpx \"${* asis}\"; @_tmpx; unalias @_tmpx"
alias @lisp%add        "menu_cmd rpn /eax $1 $2 + def"
alias @lisp%sub        "menu_cmd rpn /eax $1 $2 - def"
alias @lisp%mul        "menu_cmd rpn /eax $1 $2 * def"
alias @lisp%div        "menu_cmd rpn /eax $1 $2 / def"
