// # A parser template
// # with shift and reduce functionality

set %parser::stack 0
set %parser::token ""
set %parser::type  ""

set %parser::expr  ""
set %parser::types ""

// # when there's no rule found and there are too many tokens already
// # error out
set %parser::max_rule_length 10

// # utility functions

alias util::fetch  "\"alias\" @_tmp \"set $2 $${${1 asis}}\"; @_tmp; unalias @_tmp"
alias util::append "\"alias\" @_tmp \"set $1 \\\"$${${1 asis}} $2\\\"\"; @_tmp; unalias @_tmp"
alias util::attach "\"alias\" @_tmp \"set $1 \\\"$${${1 asis}}$2\\\"\"; @_tmp; unalias @_tmp"
alias util::set    "\"alias\" @_tmp \"set $1 $${${2 asis}}\"; @_tmp; unalias @_tmp"
// # action(action, params...), does not unalias the @_tmp
alias util::action "\"alias\" @_tmp \"$${$1} ${2- asis}\"; @_tmp"
alias util::run    "${* asis}"
// # notempty(cvar, target) target = 0 if the cvar doesn't exist or is empty, but won't error when the cvar doesn't exist
// # for that, the RPN is used before the toggle command, and a target cvar is used, target may be the same as the tested cvar
alias util::notempty "menu_cmd rpn \"/$2\" \"/$1\" load def; toggle \"$2\" 1 \"\" 0"
alias util::strcmp   "set \"$3\" \"$1\"; toggle \"$3\" 0 \"$2\" 1"

// # sample grammar:
// # ident + ident { eax = @1 + @3; echo $eax }

set %grammar::sample::types[+] addop

set "%grammar::sample::rules[(ident)(addop)(ident)]" "@sample::addop"
alias @sample::addop "( echo ( quote cc $1 + $3 ) )"

// # parsing functions:

// # shifting adds the type to the type list, the token to the expression
// # parser::parse(grammar, expression)
alias @parser::action      "${%parser::action} ${* asis}"

alias parser::parse        "set %parser::grammar $1; @parser::parse ${2- asis} %%EOF%% %%EOF%%"

alias @parser::parse       "set %parser::tmp \"$1\"; toggle %parser::tmp @parser::parse[2] \"%%EOF%%\" @parser::eof; util::action %parser::tmp ${* asis}"
alias @parser::parse[2]    "set %parser::token \"$1\"; @parser::parse[3] ${2- asis}"
alias @parser::parse[3]    "util::notempty \"%grammar::${%parser::grammar}::types[${%parser::token}]\" %parser::tmp; @parser::parse[4] ${* asis}"
alias @parser::parse[4]    "toggle %parser::tmp @parser::parse[5a] 0 @parser::parse[5b]; util::action %parser::tmp ${* asis}"
alias @parser::parse[5a]   "util::fetch \"%grammar::${%parser::grammar}::types[${%parser::token}]\" %parser::type; @parser::parse[6] ${* asis}"
alias @parser::parse[5b]   "set %parser::type ident; @parser::parse[6] ${* asis}"
alias @parser::parse[6]    "util::notempty \"%grammar::${%parser::grammar}::rules[${%parser::types}(${%parser::type})]\" %parser::tmp; @parser::parse[7] ${* asis}"
alias @parser::parse[7]    "toggle %parser::tmp @parser::reduce 0 @parser::shift; util::action %parser::tmp ${* asis}"

// # reduce: apply a rule and keep parsing, by calling @parser::parse
alias @parser::reduce      "util::fetch \"%grammar::${%parser::grammar}::rules[${%parser::types}(${%parser::type})]\" %parser::tmp; @parser::reduce[2] ${* asis}"
alias @parser::reduce[2]   "${%parser::tmp} ${%parser::expr asis} ${%parser::token asis}; @parser::reduce[3] ${* asis}"
alias @parser::reduce[3]   "set %parser::types \"\"; set %parser::expr \"\"; @parser::continue ${* asis}"

// # shift: put type and token into types and expr, then keep parsing
alias @parser::shift       "set %parser::expr \"${%parser::expr} ${%parser::token}\"; @parser::shift[2] ${* asis}"
alias @parser::shift[2]    "set %parser::types \"${%parser::types}(${%parser::type})\"; @parser::continue ${* asis}"

// # clear type and token, then continue parsing
alias @parser::continue    "set %parser::type \"\"; set %parser::token \"\"; @parser::parse ${* asis}"

// # on eof, no rule has applied, if types is not empty, print an error
alias @parser::null        ""
alias @parser::eof         "util::notempty %parser::types %parser::tmp; toggle %parser::tmp @parser::error[tail] 0 @parser::null; util::action %parser::tmp"
alias @parser::error[tail] "echo ^3parse error:^7 expression has no rule: ${%parser::expr}"
