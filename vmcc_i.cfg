set _ver_vmcc 1

// example use:
// cc x = 3 + y
// cc x = y = z = 5

set _cc_func nop

alias __cc_dofunc "$_cc_func ${* asis}"

// interpret:
alias cc "mov eax 0; _cc_assign ${* asis} _ _"

alias _cc_assign "mov _cc_func \"$2\"; toggle _cc_func _cc_addop = _cc_assign1; __cc_dofunc ${* asis}"
alias _cc_assign1 "_cc_assign ${3- asis}; _cc_assign2 $1"
// interpret:
alias _cc_assign2 "menu_cmd rpn /$1 $eax def"

alias _cc_return ""
// interpret:
alias _cc_opend "mov eax 0; _cc_assign ${* asis} _ _"

// can be: (a _ _) or (a +/- <code>)
// interpret:
alias _cc_addop   "menu_cmd rpn /eax $1 def; _cc_addop1 ${2- asis}"
// eax stores the first value, now we can have (_ _) or (<code>)
alias _cc_addop1  "mov _cc_func \"$1\"; toggle _cc_func _cc_mulop1 + _cc_addsub - _cc_addsub; __cc_dofunc ${* asis}"
// check next operator precedence
alias _cc_addsub  "mov _cc_func \"$3\"; toggle _cc_func _cc_addsubend _ _cc_opend + _cc_addsub1 - _cc_addsub1; __cc_dofunc ${* asis}"
// next operator is on same precedence level, operator is in S1
// interpret:
alias _cc_addsub1 "menu_cmd rpn /eax eax $2 $1 def; _cc_addop1 ${3- asis}"
alias _cc_addsubend  "push $eax; _cc_mulop ${2- asis}; _cc_addsubend1 $1"
alias _cc_addsubend1 "pop ebx; menu_cmd rpn /eax ebx eax $1 def"

// can be: (a _ _) or (a */slash <code>)
// interpret:
alias _cc_mulop   "menu_cmd rpn /eax $1 def; _cc_mulop1 ${2- asis}"
// eax stores the first value, now we can have (_ _) or (<code>)
alias _cc_mulop1  "mov _cc_func \"$1\"; toggle _cc_func _cc_return * _cc_muldiv / _cc_muldiv; __cc_dofunc ${* asis}"
// check next operator precedence
alias _cc_muldiv  "mov _cc_func \"$3\"; toggle _cc_func _cc_muldivend _ _cc_opend * _cc_muldiv1 / _cc_muldiv1; __cc_dofunc ${* asis}"
// next operator is on same precedence level, operator is in S1
// interpret:
alias _cc_muldiv1 "menu_cmd rpn /eax eax $2 $1 def; _cc_mulop1 ${3- asis}"
alias _cc_muldivend  "menu_cmd rpn /eax eax $2 $1 def; _cc_addop1 ${3- asis}" // no opend so execute addop

echo "^2Entering compilation mode."
exec blubvm/vmcc_c.cfg
