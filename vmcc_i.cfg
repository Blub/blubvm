set _ver_vmcc 1

///////////////////////////////////////////////////////////////////////
// execution functions
set _vm_ex 0
alias _vmx_try "set _cc_func $_vm_ex; toggle _cc_func _vmx_err 0 \"$*\" 99 nop; __cc_dofunc"
alias _vmx_catch "set _cc_func $_vm_ex; toggle _cc_func \"$*\" 0 nop"
alias _vmx_err "set _vm_ex 99; echo ^1Execution error."
alias _vmx_init "set _vm_ex 0"

// this needs to be a 2 step process due to the quotes
alias _vmxc "set _cc_new $*; _vmxc2"
alias _vmxc2 "set _cc_obj \"${_cc_obj}; ${_cc_new}\""
alias "_vmx_op+" "add $1 $2"
alias "_vmx_op-" "sub $1 $2"
alias "_vmx_op*" "mul $1 $2"
alias "_vmx_op/" "div $1 $2"
///////////////////////////////////////////////////////////////////////

// example use:
// cc x = 3 + y
// cc x = y = z = 5

set _cc_func nop

alias __cc_dofunc "$_cc_func ${* asis}"

alias cc "mov eax 0; _cc_assign ${* asis} _ _"

///////////////////////////////////////////////////////////////////////
// Actual interpreter code

alias _cc_assign "mov _cc_func \"$2\"; toggle _cc_func _cc_addop = _cc_assign1; __cc_dofunc ${* asis}"
alias _cc_assign1 "_cc_assign ${3- asis}; _cc_assign2 $1"
alias _cc_assign2 "menu_cmd rpn /$1 $eax def"

alias _cc_return "set _cc_func \"${* asis}\""
alias _cc_opend "menu_cmd rpn /eax eax $2 $1 def"

alias _cc_ifterm "set _cc_func $1; toggle _cc_func $3 ( $2; __cc_dofunc ${4- asis}"

// '(' term ')' <code> so we have to pop off the ')' and only return <code>
alias _cc_term  "_cc_assign ${2- asis}; _cc_term1"
alias _cc_term1 "_cc_term2 ${_cc_func asis}"
alias _cc_term2 "set _cc_func \"${2- asis}\""

// addsub:
// can be: + 3 *  -> checks *
//         + 3 _  -> checks _
//         + ( 3  -> checks 3

// can be: (a _ _) or (a +/- <code>)
alias _cc_addop   "_cc_ifterm $1 _cc_addopA _cc_addopB ${* asis}"
alias _cc_addopA  "_cc_term ${* asis}; _cc_addopA1"
alias _cc_addopA1 "_cc_addop1 ${_cc_func asis}"
alias _cc_addopB  "menu_cmd rpn /eax $1 def; _cc_addop1 ${2- asis}"
// eax stores the first value, now we can have (_ _) or (<code>)
alias _cc_addop1  "mov _cc_func \"$1\"; toggle _cc_func _cc_mulop1 + _cc_addsub - _cc_addsub; __cc_dofunc ${* asis}"
alias _cc_addopr  "mov _cc_func \"$1\"; toggle _cc_func _cc_error _ _cc_opend + _cc_addsub - _cc_addsub; __cc_dofunc ${* asis}"
// check next operator precedence
alias _cc_addsub  "mov _cc_func \"$3\"; toggle _cc_func _cc_addsubend _ _cc_opend + _cc_addsub1 - _cc_addsub1; __cc_dofunc ${* asis}"
// next operator is on same precedence level, operator is in S1
alias _cc_addsub1 "menu_cmd rpn /eax eax $2 $1 def; _cc_addop1 ${3- asis}"
alias _cc_addsubend  "push $eax; _cc_ifterm $2 _cc_term _cc_mulop ${2- asis}; _cc_addsubend1 $1"
alias _cc_addsubend1 "pop ebx; menu_cmd rpn /eax ebx eax $1 def; _cc_addsubend2"
alias _cc_addsubend2 "_cc_addop1 ${_cc_func asis}"

// can be: (a _ _) or (a +/- <code>)
alias _cc_mulop   "_cc_ifterm $1 _cc_mulopA _cc_mulopB ${* asis}"
alias _cc_mulopA  "_cc_term ${* asis}; _cc_mulopA1"
alias _cc_mulopA1 "_cc_mulop1 ${_cc_func asis}"
alias _cc_mulopB  "menu_cmd rpn /eax $1 def; _cc_mulop1 ${2- asis}"
// eax stores the first value, now we can have (_ _) or (<code>)
alias _cc_mulop1  "mov _cc_func \"$1\"; toggle _cc_func _cc_NEXTop1 * _cc_muldiv / _cc_muldiv; __cc_dofunc ${* asis}"
alias _cc_mulopr  "mov _cc_func \"$1\"; toggle _cc_func _cc_addop1 * _cc_muldiv / _cc_muldiv; __cc_dofunc ${* asis}"
// check next operator precedence
alias _cc_muldiv  "mov _cc_func \"$3\"; toggle _cc_func _cc_muldivend _ _cc_opend * _cc_muldiv1 / _cc_muldiv1; __cc_dofunc ${* asis}"
// next operator is on same precedence level, operator is in S1
alias _cc_muldiv1 "menu_cmd rpn /eax eax $2 $1 def; _cc_mulop1 ${3- asis}"
alias _cc_muldivend  "push $eax; _cc_ifterm $2 _cc_term _cc_NEXTop ${2- asis}; _cc_muldivend1 $1"
alias _cc_muldivend1 "pop ebx; menu_cmd rpn /eax ebx eax $1 def; _cc_muldivend2"
alias _cc_muldivend2 "_cc_addop1 ${_cc_func asis}"

alias _cc_NEXTop  "menu_cmd rpn /eax $1 def; _cc_NEXTop1 ${2- asis}"
alias _cc_NEXTop1 "set _cc_func \"${* asis}\""

//echo "^2Entering compilation mode."
// exec blubvm/vmcc_c.cfg

alias vmcc_comp "exec blubvm/vmcc_c.cfg"
alias vmcc_int "exec blubvm/vmcc_i.cfg"
echo "^2You can switch to compilation mode using ^3vmcc_comp"
